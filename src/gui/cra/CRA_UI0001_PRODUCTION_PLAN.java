package gui.cra;

import helper.FormField;
import __main__.GlobalMethods;
import __main__.GlobalVars;
import __main__.PropertiesLoader;
import entity.ConfigUcs;
import entity.ProductionPlan;
import gui.warehouse_dispatch.WAREHOUSE_DISPATCH_UI0002_DISPATCH_SCAN_JPANEL;
import helper.FormValidator;
import helper.HQLHelper;
import helper.Helper;
import helper.JDialogExcelFileChooser;
import helper.UIHelper;
import helper.XLSXExportHelper;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.type.StandardBasicTypes;
import ui.UILog;

/**
 *
 * @author Oussama
 */
public class CRA_UI0001_PRODUCTION_PLAN extends javax.swing.JPanel {

    private JTabbedPane parent;
    Vector<String> planning_table_header = new Vector<String>(Arrays.asList(
            "ID",
            "Article",
            "Module Intern.",
            "Quantité plannif.",
            "Dernière modif.",
            "Modifié par."
    ));

    Vector planning_table_data = new Vector();
    List<ProductionPlan> excelLines;
    ProductionPlan aux;
    boolean err = false;

    public static void main(String[] args) {

        String feedback = PropertiesLoader.loadConfigProperties();
        //LOGGER.log(Level.INFO, feedback);
        GlobalMethods.createDefaultDirectories();
        Helper.startSession();

        CRA_UI0001_PRODUCTION_PLAN c = new CRA_UI0001_PRODUCTION_PLAN();
        JFrame f = new JFrame();
        f.setSize(1200, 700);
        f.add(c);
        f.setVisible(true);

    }

    /**
     * Creates new form CRA_UI0001_PRODUCTION_PLAN
     */
    public CRA_UI0001_PRODUCTION_PLAN() {
        initComponents();
    }

    public CRA_UI0001_PRODUCTION_PLAN(JTabbedPane rootTabbedPane) {
        this.parent = rootTabbedPane;
        initComponents();
        initGui();
    }

    private void initGui() {
        planning_jtable.setModel(new DefaultTableModel(new Vector(), planning_table_header));
        UIHelper.disableEditingJtable(planning_jtable);
        this.initContainerTableDoubleClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        planning_jtable = new javax.swing.JTable();
        btn_delete_planning = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        craUI0001_form_panel = new javax.swing.JPanel();
        btn_import_csv = new javax.swing.JButton();
        btn_csv_example = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_harnessPart = new javax.swing.JTextField();
        txt_internalPart = new javax.swing.JTextField();
        txt_qtyPlanned = new javax.swing.JTextField();
        btn_delete = new javax.swing.JButton();
        msg_lbl = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        btn_new = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        txt_createTime = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txt_createUser = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txt_writeTime = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txt_writeUser = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txt_harness_part_filter = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_internal_part_filter = new javax.swing.JTextField();
        btn_export_excel = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("jMenu3");

        setBackground(new java.awt.Color(36, 65, 86));
        setToolTipText("Planning d'assemblage");
        setName("Planning d'assemblage"); // NOI18N

        planning_jtable.setAutoCreateRowSorter(true);
        planning_jtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        planning_jtable.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(planning_jtable);

        btn_delete_planning.setBackground(new java.awt.Color(255, 0, 51));
        btn_delete_planning.setForeground(new java.awt.Color(255, 255, 255));
        btn_delete_planning.setText("Supprimer le planning");
        btn_delete_planning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete_planningActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Planning d'assemblage");

        craUI0001_form_panel.setBackground(new java.awt.Color(36, 65, 86));
        craUI0001_form_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btn_import_csv.setText("Importer le planning .csv ...");
        btn_import_csv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_import_csvActionPerformed(evt);
            }
        });

        btn_csv_example.setText("Exemple fichier .csv ...");
        btn_csv_example.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_csv_exampleActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Article faisceau");
        jLabel2.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Code interne");
        jLabel3.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Quantité planifiée");
        jLabel4.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_harnessPart.setNextFocusableComponent(txt_internalPart);
        txt_harnessPart.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_internalPart.setNextFocusableComponent(txt_qtyPlanned);
        txt_internalPart.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_qtyPlanned.setNextFocusableComponent(btn_save);
        txt_qtyPlanned.setPreferredSize(new java.awt.Dimension(130, 24));
        txt_qtyPlanned.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_qtyPlannedFocusLost(evt);
            }
        });

        btn_delete.setText("Supprimer");
        btn_delete.setEnabled(false);
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        msg_lbl.setBackground(new java.awt.Color(255, 255, 255));
        msg_lbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        msg_lbl.setForeground(new java.awt.Color(255, 255, 255));
        msg_lbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msg_lbl.setNextFocusableComponent(txt_id);

        txt_id.setEditable(false);
        txt_id.setText("#");
        txt_id.setNextFocusableComponent(txt_harnessPart);
        txt_id.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("ID");
        jLabel5.setPreferredSize(new java.awt.Dimension(130, 24));

        btn_save.setText("Enregistrer");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_new.setText("Nouveau");
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Créé le.");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel18.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_createTime.setEditable(false);
        txt_createTime.setBackground(new java.awt.Color(255, 255, 255));
        txt_createTime.setToolTipText("");
        txt_createTime.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Créé par.");
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel19.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_createUser.setEditable(false);
        txt_createUser.setBackground(new java.awt.Color(255, 255, 255));
        txt_createUser.setToolTipText("");
        txt_createUser.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Modifié le.");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel20.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_writeTime.setEditable(false);
        txt_writeTime.setBackground(new java.awt.Color(255, 255, 255));
        txt_writeTime.setToolTipText("");
        txt_writeTime.setPreferredSize(new java.awt.Dimension(130, 24));

        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Modifié par.");
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel21.setPreferredSize(new java.awt.Dimension(130, 24));

        txt_writeUser.setEditable(false);
        txt_writeUser.setBackground(new java.awt.Color(255, 255, 255));
        txt_writeUser.setToolTipText("");
        txt_writeUser.setPreferredSize(new java.awt.Dimension(130, 24));

        javax.swing.GroupLayout craUI0001_form_panelLayout = new javax.swing.GroupLayout(craUI0001_form_panel);
        craUI0001_form_panel.setLayout(craUI0001_form_panelLayout);
        craUI0001_form_panelLayout.setHorizontalGroup(
            craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(craUI0001_form_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msg_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(craUI0001_form_panelLayout.createSequentialGroup()
                        .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(craUI0001_form_panelLayout.createSequentialGroup()
                                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_harnessPart, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                    .addComponent(txt_internalPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_qtyPlanned, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_createTime, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(txt_createUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_writeTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_writeUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(craUI0001_form_panelLayout.createSequentialGroup()
                                .addComponent(btn_import_csv)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_new)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_csv_example)))
                        .addGap(127, 127, 127)
                        .addComponent(btn_delete)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        craUI0001_form_panelLayout.setVerticalGroup(
            craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(craUI0001_form_panelLayout.createSequentialGroup()
                .addComponent(msg_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btn_delete)
                    .addComponent(btn_csv_example)
                    .addComponent(btn_save)
                    .addComponent(btn_new)
                    .addComponent(btn_import_csv))
                .addGap(9, 9, 9)
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_createTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_createUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_harnessPart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_writeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_internalPart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(craUI0001_form_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_writeUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_qtyPlanned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );

        txt_harnessPart.getAccessibleContext().setAccessibleName("harnessPart");
        txt_internalPart.getAccessibleContext().setAccessibleName("internalPart");
        txt_qtyPlanned.getAccessibleContext().setAccessibleName("plannedQty");
        txt_id.getAccessibleContext().setAccessibleName("id");
        txt_createTime.getAccessibleContext().setAccessibleName("createTime");
        txt_createUser.getAccessibleContext().setAccessibleName("createUser");
        txt_writeTime.getAccessibleContext().setAccessibleName("writeTime");
        txt_writeUser.getAccessibleContext().setAccessibleName("writeUser");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Article faisceau");

        jLabel7.setText("Code interne");

        btn_export_excel.setText("Exporter en Excel");
        btn_export_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_export_excelActionPerformed(evt);
            }
        });

        btn_refresh.setText("Actualiser");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txt_harness_part_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txt_internal_part_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(btn_refresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_export_excel)
                .addContainerGap(257, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_harness_part_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txt_internal_part_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_export_excel)
                    .addComponent(btn_refresh))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_delete_planning, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1)
                    .addComponent(craUI0001_form_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(craUI0001_form_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete_planning, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_csv_exampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_csv_exampleActionPerformed

        JFileChooser chooser = new javax.swing.JFileChooser();
        chooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        chooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop"));
        chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        UIHelper.centerJFileChooser(chooser);
        int status = chooser.showSaveDialog(null);

        if (status == JFileChooser.APPROVE_OPTION) {
            //FileOutputStream target = null;
            try {

                File selectedFile = chooser.getSelectedFile();
                //target.close();
                File source = new File(".\\src\\csv\\production_plan_csv_example.csv");
                System.out.println(" source " + source.getAbsolutePath() + ".csv");

                File dest = chooser.getSelectedFile();

                InputStream is = null;
                OutputStream os = null;
                try {
                    is = new FileInputStream(source);
                    os = new FileOutputStream(chooser.getSelectedFile() + ".csv");
                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = is.read(buffer)) > 0) {
                        os.write(buffer, 0, length);
                    }
                } finally {
                    is.close();
                    os.close();
                }

                JOptionPane.showMessageDialog(null,
                        "Fichier enregistré à l'emplacement \n " + selectedFile.getAbsolutePath() + ".csv", "File saved !",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (FileNotFoundException ex) {
                //
                JOptionPane.showMessageDialog(null, "Le processus ne peut pas accéder au fichier car ce fichier est utilisé ou un fihier du même nom est ouvert.\n Fermer le fichier puis réessayer.", "Erreur de sauvegarde !", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JDialogExcelFileChooser.class.getName()).log(Level.SEVERE, null, ex);

            } catch (IOException ex) {
                Logger.getLogger(JDialogExcelFileChooser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_csv_exampleActionPerformed

    private boolean deletePlanning() {
        int confirmed = JOptionPane.showConfirmDialog(
                this.parent.getParent(),
                "Le planning actuel va être écraser ?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == 0) {
            Helper.startSession();
            Query query = Helper.sess.createQuery(HQLHelper.DEL_PRODUCTION_PLAN);
            int result = query.executeUpdate();
            JOptionPane.showMessageDialog(null, "Planning supprimé !\n");
            planning_table_data = new Vector();
            refreshPlanningTable();
            return true;
        }

        return false;
    }

    private void initContainerTableDoubleClick() {
        this.planning_jtable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    //Cleat the message field
                    msg_lbl.setText("");

                    int id = (int) planning_jtable.getValueAt(planning_jtable.getSelectedRow(), 0);
                    Helper.startSession();
                    aux = (ProductionPlan) Helper.sess.load(ProductionPlan.class, id);
                    //#######################
                    UIHelper.mapValuesInPanelFields(craUI0001_form_panel, aux, true);
                    btn_delete.setEnabled(true);
                }
            }
        }
        );
    }
    private void btn_import_csvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_import_csvActionPerformed

        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop/"));
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV", "csv");
            fileChooser.setFileFilter(filter);
            int status = fileChooser.showOpenDialog(null);

            if (status == JFileChooser.APPROVE_OPTION) {

                File selectedFile = fileChooser.getSelectedFile();
                //Past the workbook to the file chooser
                String SAMPLE_CSV_FILE_PATH = selectedFile.getAbsolutePath();
                Reader reader = Files.newBufferedReader(Paths.get(SAMPLE_CSV_FILE_PATH));
                CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT
                        .withFirstRecordAsHeader()
                        .withIgnoreHeaderCase()
                        .withTrim()
                        .withDelimiter(';')
                );

                try {
                    int i = 1;
                    //======= Step 1 : Buil a planningLine list in orther 
                    //to validate the content of csv file.
                    //Vector list = new Vector();
                    ArrayList<Object> planningLines = new ArrayList<Object>();
                    ArrayList<String> harnessPartList = new ArrayList<String>();
                    ArrayList<String> internalPartList = new ArrayList<String>();
                    aux = new ProductionPlan();
                    for (CSVRecord record : csvParser) {
                        try {

                            aux = createPlanningObjectFromCSV(record);

                            harnessPartList.add(aux.getHarnessPart());

                            internalPartList.add(aux.getInternalPart());

                            planningLines.add(aux);

                        } catch (Exception e) {
                            String errorMsg = "Erreur dans la ligne " + i + ".\n"
                                    + "Merci de vérifier les données du fichier CSV.";
                            System.out.println(errorMsg);
                            UILog.errorDialog(errorMsg);

                            return;
                        }
                        i++;
                    }

                    //====== Step 2 : check if CPN and LPN exists in wire_config
                    if (checkIfAllCustomerPartsExists(harnessPartList)
                            && checkifAllInternalPartsExists(internalPartList)) {
                        
                        //====== Step 3 : Cleaning the table and import the new data
                        if (deletePlanning()) {
                            int lineNo = new ProductionPlan().createList(planningLines);
                            if (lineNo == 0) {
                                UILog.infoDialog("Importation terminée avec succès !");
                            } else {
                                UILog.errorDialog("Une erreur est survenue dans la ligne " + lineNo);
                                return;
                            }
                        }
                        
                    }

                    

                    // In the end of the import, refresh the list
                    refreshPlanningTable();

                } catch (Exception ex) {
                    Logger.getLogger(WAREHOUSE_DISPATCH_UI0002_DISPATCH_SCAN_JPANEL.class.getName()).log(Level.SEVERE, null, ex);
                    UILog.severeDialog(this, ex.getMessage(), "Exception");
                }
            } else if (status == JFileChooser.CANCEL_OPTION) {
                System.out.println("Canceled");
            }
        } catch (IOException ex) {
            Logger.getLogger(WAREHOUSE_DISPATCH_UI0002_DISPATCH_SCAN_JPANEL.class.getName()).log(Level.SEVERE, null, ex);
            UILog.severeDialog(this, ex.getMessage(), "IOException");
        }
    }//GEN-LAST:event_btn_import_csvActionPerformed

    private boolean checkIfAllCustomerPartsExists(ArrayList<String> harnessPartList) {
        Helper.startSession();
        SQLQuery query;
        String query_str = "SELECT * FROM ( VALUES ('')";
        for (String cpn : harnessPartList){
            query_str += ",('"+cpn+"')";
        }
        query_str += " ) AS T(hp) WHERE hp <> '' AND hp NOT IN (SELECT harness_part FROM wire_config);";
        query = Helper.sess.createSQLQuery(query_str);
        query.addScalar("hp", StandardBasicTypes.STRING);
        List<String> result = query.list();        
        Helper.sess.getTransaction().commit();
        if (result.isEmpty()) {
            return true;
        }else{
            ImportError dialog = new ImportError(
                    new Frame(), 
                    true,"Erreur d'import", 
                    "Les code articles suivants ne sont pas paramétrés :",
                    result);
            dialog.setVisible(true);
            UILog.errorDialog("Import annulé !");
            return false;
        }
    }

    private boolean checkifAllInternalPartsExists(ArrayList<String> internalPartList) {

        Helper.startSession();
        SQLQuery query;
        String query_str = "SELECT * FROM ( VALUES ('')";
        for (String ipn : internalPartList){
            query_str += ",('"+ipn+"')";
        }
        query_str += " ) AS T(ipn) WHERE ipn <> '' AND ipn NOT IN (SELECT internal_part FROM wire_config);";
        query = Helper.sess.createSQLQuery(query_str);
        query.addScalar("ipn", StandardBasicTypes.STRING);
        List<String> result = query.list();        
        Helper.sess.getTransaction().commit();
        if (result.isEmpty()) {
            return true;
        }else{
            ImportError dialog = new ImportError(
                    new Frame(), 
                    true,"Erreur d'import", 
                    "Les code modules internes suivants ne sont pas paramétrés :",
                    result);
            dialog.setVisible(true);
            UILog.errorDialog("Import annulé !");
            return false;
        }
    }


    private void btn_delete_planningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete_planningActionPerformed

        deletePlanning();
        //GlobalMethods.refreshJTable(planning_jtable, new Vector(), header_titles_list);
        refreshPlanningTable();
    }//GEN-LAST:event_btn_delete_planningActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        refreshPlanningTable();
    }//GEN-LAST:event_btn_refreshActionPerformed

    /**
     *
     * @return True if all fields match the patterns, false otherwise
     */
    private boolean validatePatterns() {
        final List<FormField> fieldsList = Arrays.asList(
                new FormField(txt_harnessPart, "text",
                        "[a-zA-Z0-9]{6,25}", "Le code acticle doit être "
                        + "alpha-numérique et de longueur entre 6 et 25 caractères.", msg_lbl, GlobalVars.BG_DEFAULT_YELLOW, Color.WHITE),
                new FormField(txt_internalPart, "text",
                        "[a-zA-Z0-9]{6,25}",
                        "Le code interne doit être "
                        + "alpha-numérique et de longueur entre 6 et 25 caractères.", msg_lbl, GlobalVars.BG_DEFAULT_YELLOW, Color.WHITE),
                new FormField(txt_qtyPlanned, "int", "^[1-9]{1}+\\d*$", "La quantité doit être numérique et supérieur à 0.", msg_lbl, GlobalVars.BG_DEFAULT_YELLOW, Color.WHITE)
        );

        return new FormValidator().validatePatterns(fieldsList, false);

    }

    /**
     * Validate value in the database.
     *
     * @return
     */
    private boolean validateValues() {
        int lineId = 0;
        if (!isHarnessPartExist(txt_harnessPart.getText())) { //IF PN exists in Configuration Standard Part
            msg_lbl.setForeground(Color.red);
            msg_lbl.setText(String.format("L'article %s n'est pas paramétré ou n'existe pas. Vérifier le menu 'Configuration / Article Master Data'", txt_harnessPart.getText()));
            txt_harnessPart.requestFocus();
            txt_harnessPart.selectAll();
            return false;
        } else if (!isSupplierPartExist(txt_internalPart.getText())) { //IF internal module exists in Configuration Standard Part
            msg_lbl.setForeground(Color.red);
            msg_lbl.setText(String.format("Le module interne %s n'est pas paramétré ou n'existe pas. Vérifier le menu 'Configuration / Article Master Data'", txt_internalPart.getText()));
            txt_harnessPart.setBackground(Color.yellow);
            txt_internalPart.requestFocus();
            txt_internalPart.selectAll();
            return false;
        } else if (is_CPN_OR_LPN_Planned(txt_harnessPart.getText(), txt_internalPart.getText(), lineId)) {
            msg_lbl.setText(String.format("Article %s ou/et module interne %s déjà planifiés!", txt_harnessPart.getText(), txt_internalPart.getText()));
            msg_lbl.setForeground(Color.red);
            txt_harnessPart.requestFocus();
            txt_harnessPart.selectAll();
            txt_harnessPart.setBackground(Color.yellow);
            txt_internalPart.setBackground(Color.yellow);
            return false;
        } //Is the internal part exist in production plan
        else if (isInternalPartPlanned(txt_internalPart.getText(), lineId)) {
            msg_lbl.setText("Le module interne " + txt_internalPart.getText() + " est déjà planifié!");
            msg_lbl.setForeground(Color.red);
            txt_internalPart.requestFocus();
            txt_internalPart.selectAll();
            txt_internalPart.setBackground(Color.yellow);
            return false;
        } else {
            return true;
        }
    }

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        int lineId = 0;
        //If it's a modification, we look for an existing line with a different id != 0
        //and not this one that we want to edit.
        if (!txt_id.getText().equals("#")) {
            lineId = Integer.valueOf(txt_id.getText());
        }
        if (validatePatterns() && validateValues()) {//Inputs matches regex

            msg_lbl.setForeground(Color.green);
            if (lineId == 0) {//It's a new item
                ProductionPlan p = (ProductionPlan) UIHelper.mapValuesFromJPanelToObj(craUI0001_form_panel, "entity.ProductionPlan", true);
                lineId = p.create(p);
                msg_lbl.setText("Nouveau élement créé #" + lineId);
            } else {//It's a modification
                aux.setHarnessPart(txt_harnessPart.getText());
                aux.setInternalPart(txt_internalPart.getText());
                aux.setPlannedQty(Integer.valueOf(txt_qtyPlanned.getText()));
                aux.update(aux);
                msg_lbl.setText("Changements enregistrés!");
            }
            clearFields();
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void txt_qtyPlannedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_qtyPlannedFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_qtyPlannedFocusLost

    private void btn_export_excelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_export_excelActionPerformed
        XLSXExportHelper h = new XLSXExportHelper();
        h.exportToXSSFWorkbook(this, "PLANNING_LINES", this.excelLines);
    }//GEN-LAST:event_btn_export_excelActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

        int confirmed = JOptionPane.showConfirmDialog(this,
                String.format("Confirmez-vous la suppression de cet élément [%s] ?",
                        this.aux.getId()),
                "Suppression",
                JOptionPane.WARNING_MESSAGE);

        if (confirmed == 0) {
            aux.delete(aux);
            clearFields();
            msg_lbl.setBackground(Color.green);
            msg_lbl.setText("Elément supprimé !");
            refreshPlanningTable();
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        clearFields();
    }//GEN-LAST:event_btn_newActionPerformed

    private Vector getPlanningLines() {
        planning_table_data = new Vector();
        Helper.startSession();

        Query query = Helper.sess.createQuery(HQLHelper.GET_PLANNING_LINE_LIKE_CPN_AND_LPN);
        query.setParameter("harnessPart", "%" + txt_harness_part_filter.getText() + "%");
        query.setParameter("internalPart", "%" + txt_internal_part_filter.getText() + "%");
        List<ProductionPlan> result = query.list();
        Helper.sess.getTransaction().commit();

        this.excelLines = new ArrayList<ProductionPlan>(result.size());

        //Populate the jTable with lines
        for (ProductionPlan obj : result) {
            //Add this object to excelLines list
            this.excelLines.add((ProductionPlan) obj);

            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(obj.getId());
            oneRow.add(obj.getHarnessPart());
            oneRow.add(obj.getInternalPart());
            oneRow.add(obj.getPlannedQty());
            oneRow.add(obj.getWriteTime());
            oneRow.add(obj.getWriteUser());

            planning_table_data.add(oneRow);
        }
        return planning_table_data;
    }

    private boolean is_CPN_OR_LPN_Planned(String harnessPart, String internalPart, int id) {
        Query query = Helper.sess.createQuery(HQLHelper.GET_PLANNING_LINE_BY_CPN_OR_LPN_WITH_DIFF_ID);
        query.setParameter("harnessPart", harnessPart);
        query.setParameter("internalPart", internalPart);
        query.setParameter("id", id);
        List<ProductionPlan> result = query.list();
        if (result.size() > 0) {
            return true;
        }
        return false;
    }

    private boolean isInternalPartPlanned(String internalPart, int id) {
        Query query = Helper.sess.createQuery(HQLHelper.GET_PLANNING_LINE_LPN_WITH_DIFFERENT_ID);
        query.setParameter("internalPart", internalPart);
        query.setParameter("id", id);
        List<ProductionPlan> result = query.list();
        if (result.size() > 0) {
            return true;
        }
        return false;
    }

    private boolean isHarnessPartExist(String hp) {
        return ConfigUcs.isHarnessPartExist(hp);
    }

    private boolean isSupplierPartExist(String sp) {
        return ConfigUcs.isSupplierPartExist(sp);
    }

    private void refreshPlanningTable() {
        planning_jtable.setModel(new DefaultTableModel(new Vector(), planning_table_header));
        planning_jtable.setModel(new DefaultTableModel(getPlanningLines(), planning_table_header));
    }

    private ProductionPlan createPlanningObjectFromCSV(CSVRecord record) {
        ProductionPlan pp = new ProductionPlan(record.get("harness_part"), record.get("internal_part"), Integer.valueOf(record.get("planned_qty")));
        return pp;
    }

    private void clearFields() {
        UIHelper.clearJTextFields(craUI0001_form_panel.getComponents());
        txt_id.setText("#");
        btn_delete.setEnabled(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_csv_example;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_delete_planning;
    private javax.swing.JButton btn_export_excel;
    private javax.swing.JButton btn_import_csv;
    private javax.swing.JButton btn_new;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JPanel craUI0001_form_panel;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel msg_lbl;
    private javax.swing.JTable planning_jtable;
    private javax.swing.JTextField txt_createTime;
    private javax.swing.JTextField txt_createUser;
    private javax.swing.JTextField txt_harnessPart;
    private javax.swing.JTextField txt_harness_part_filter;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_internalPart;
    private javax.swing.JTextField txt_internal_part_filter;
    private javax.swing.JTextField txt_qtyPlanned;
    private javax.swing.JTextField txt_writeTime;
    private javax.swing.JTextField txt_writeUser;
    // End of variables declaration//GEN-END:variables

}
