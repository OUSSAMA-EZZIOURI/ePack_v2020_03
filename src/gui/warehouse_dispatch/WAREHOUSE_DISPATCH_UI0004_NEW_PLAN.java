/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.warehouse_dispatch;

import entity.ConfigProject;
import entity.ConfigTransporter;
import entity.ConfigWarehouse;
import entity.LoadPlan;
import entity.LoadPlanDestination;
import entity.LoadPlanDestinationRel;
import gui.warehouse_dispatch.process_reservation.S001_ReservPalletNumberScan;
import gui.warehouse_dispatch.state.WarehouseHelper;
import helper.HQLHelper;
import helper.Helper;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.hibernate.Query;
import ui.UILog;
import ui.error.ErrorMsg;

/**
 *
 * @author user
 */
public final class WAREHOUSE_DISPATCH_UI0004_NEW_PLAN extends javax.swing.JDialog {

    /**
     * Creates new form WAREHOUSE_OUT_UI0004_NEW_PLAN
     */
    public WAREHOUSE_DISPATCH_UI0004_NEW_PLAN(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        initGui();
        main_tabbedPane.setEnabledAt(1, false);

    }

    private void initGui() {
        Helper.centerJDialog(this);
        this.setResizable(false);
        project_filter = ConfigProject.initProjectsJBox(this, project_filter, false);
        transporter_filter = ConfigTransporter.initTransporterJBox(this, transporter_filter, false);
        this.ok_btn.setEnabled(false);
        disableEditingTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ok_btn = new javax.swing.JButton();
        cancel_btn = new javax.swing.JButton();
        main_tabbedPane = new javax.swing.JTabbedPane();
        tab1 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        login_lbl3 = new javax.swing.JLabel();
        project_filter = new javax.swing.JComboBox();
        login_lbl4 = new javax.swing.JLabel();
        warehouse_filter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        deliveryDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        transporter_filter = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        truck_no_text = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        tab2_fdp = new javax.swing.JScrollPane();
        destinations_table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nouveau plan de chargement");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        ok_btn.setText("Créer");
        ok_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_btnActionPerformed(evt);
            }
        });

        cancel_btn.setText("Annuler");
        cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_btnActionPerformed(evt);
            }
        });

        main_tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                main_tabbedPaneStateChanged(evt);
            }
        });

        tab1.setLayout(new java.awt.GridLayout(1, 2, 2, 1));

        jPanel1.setLayout(new java.awt.GridLayout(9, 2, 0, 1));

        login_lbl3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        login_lbl3.setText("Projet");
        jPanel1.add(login_lbl3);

        project_filter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        project_filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                project_filterItemStateChanged(evt);
            }
        });
        project_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                project_filterActionPerformed(evt);
            }
        });
        jPanel1.add(project_filter);

        login_lbl4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        login_lbl4.setText("Magasin F.G");
        jPanel1.add(login_lbl4);

        warehouse_filter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        warehouse_filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                warehouse_filterItemStateChanged(evt);
            }
        });
        warehouse_filter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                warehouse_filterMouseClicked(evt);
            }
        });
        warehouse_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warehouse_filterActionPerformed(evt);
            }
        });
        jPanel1.add(warehouse_filter);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Date d'expédition (obligatoire) :");
        jPanel1.add(jLabel1);

        deliveryDatePicker.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deliveryDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryDatePickerActionPerformed(evt);
            }
        });
        deliveryDatePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deliveryDatePickerKeyPressed(evt);
            }
        });
        jPanel1.add(deliveryDatePicker);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Transporteur (obligatoire) :");
        jPanel1.add(jLabel2);

        jPanel1.add(transporter_filter);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Matricule  Remorque");
        jPanel1.add(jLabel3);

        truck_no_text.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(truck_no_text);

        tab1.add(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        tab1.add(jPanel2);

        main_tabbedPane.addTab("Informations générales", tab1);

        tab2_fdp.setBackground(new java.awt.Color(153, 255, 255));

        destinations_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        destinations_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                destinations_tableMouseEntered(evt);
            }
        });
        tab2_fdp.setViewportView(destinations_table);

        main_tabbedPane.addTab("Points de livraison", tab2_fdp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(main_tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 924, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 80, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ok_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(262, 262, 262)
                .addComponent(cancel_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(main_tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok_btn)
                    .addComponent(cancel_btn))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ok_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_btnActionPerformed
        //Get selected destinations 
        String[] selectedDestinations = new String[destinations_table.getRowCount()];
        int i = 0;
        boolean flag = false;
        for (int r = 0; r < destinations_table.getRowCount(); r++) {
            if ((boolean) destinations_table.getValueAt(r, 0) == true) {
                selectedDestinations[i++] = destinations_table.getValueAt(r, 1).toString();
                flag = true;
            }
        }
        if (deliveryDatePicker.getDate() == null) {
            UILog.severe(ErrorMsg.APP_ERR0027[0]);
            UILog.severeDialog(null, ErrorMsg.APP_ERR0027);
            this.main_tabbedPane.setSelectedIndex(0);
            deliveryDatePicker.requestFocus();
        } else if (!flag) {
            UILog.severe(ErrorMsg.APP_ERR0026[0]);
            UILog.severeDialog(null, ErrorMsg.APP_ERR0026);
            this.main_tabbedPane.setSelectedIndex(1);
        } else {
//            if (transporter_text.getText().isEmpty()) {
//                this.main_tabbedPane.setSelectedIndex(0);
//                transporter_text.requestFocus();
//                UILog.severe(ErrorMsg.APP_ERR0045[0]);
//                UILog.severeDialog(null, ErrorMsg.APP_ERR0045);
//            } else {
                try {

                    Date date = new Date();
                    SimpleDateFormat dateDf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    LoadPlan lp = new LoadPlan();
                    lp.setCreateId(WarehouseHelper.warehouse_reserv_context.getUser().getId());
                    lp.setCreateTime(date);
                    lp.setDeliveryTime(deliveryDatePicker.getDate());
                    lp.setTransportCompany(transporter_filter.getSelectedItem().toString());
                    lp.setUser(WarehouseHelper.warehouse_reserv_context.getUser().getFirstName() + " " + WarehouseHelper.warehouse_reserv_context.getUser().getLastName());
                    lp.setPlanState(WarehouseHelper.LOAD_PLAN_STATE_OPEN);
                    lp.setTruckNo((truck_no_text.getText().isEmpty()) ? "" : truck_no_text.getText());
                    lp.setProject(project_filter.getSelectedItem().toString());
                    lp.setFgWarehouse(warehouse_filter.getSelectedItem().toString());

                    String packaging_wh = new ConfigWarehouse().getPackagingWh(project_filter.getSelectedItem().toString());
                    lp.setPackagingWarehouse(packaging_wh);
                    //System.out.println("lp.datedeliv " + dateDf.format(deliveryDatePicker.getDate()));
                    //System.out.println("lp " + lp.toString());
                    //Save the new plan
                    int planId = lp.create(lp);

                    //Save the destinations of the plan
                    String finalDest = "";
                    for (String str : selectedDestinations) {
                        if (str != null && !"".equals(str)) {
                            LoadPlanDestinationRel planRel = new LoadPlanDestinationRel(str, planId);
                            planRel.create(planRel);
                            finalDest = str;
                        }
                    }
                    System.out.println("finalDest " + finalDest.toString());
                    WarehouseHelper.temp_load_plan = lp;

                    //Load data into labels
                    WarehouseHelper.Dispatch_Gui_Jpanel.loadPlanDataToLabels(lp, finalDest);

                    //Load plans JTable
                    WarehouseHelper.Dispatch_Gui_Jpanel.loadPlanDataInGui(lp, finalDest);

                    WarehouseHelper.Dispatch_Gui_Jpanel.reloadPlansData();
                    //Auth réussie, Passage à l'état S02 de lecture des fiches Galia               
                    WarehouseHelper.warehouse_reserv_context.setState(new S001_ReservPalletNumberScan());
                    this.dispose();

                } catch (Exception e) {
                    UILog.severe(ErrorMsg.APP_ERR0028[0]);
                    UILog.severeDialog(null, ErrorMsg.APP_ERR0028);
                    UILog.exceptionDialog(this, e);
                }
//            }//
        }
    }//GEN-LAST:event_ok_btnActionPerformed

    private void cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancel_btnActionPerformed

    private void warehouse_filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_warehouse_filterItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_warehouse_filterItemStateChanged

    private void warehouse_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warehouse_filterActionPerformed


    }//GEN-LAST:event_warehouse_filterActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
    }//GEN-LAST:event_formMouseEntered

    private void project_filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_project_filterItemStateChanged

    }//GEN-LAST:event_project_filterItemStateChanged

    private void project_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_project_filterActionPerformed
        warehouse_filter = ConfigWarehouse.initWarehouseJBox(this, warehouse_filter, String.valueOf(project_filter.getSelectedItem()), 1, false);
    }//GEN-LAST:event_project_filterActionPerformed

    private void destinations_tableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_destinations_tableMouseEntered

    }//GEN-LAST:event_destinations_tableMouseEntered

    private void warehouse_filterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_warehouse_filterMouseClicked

    }//GEN-LAST:event_warehouse_filterMouseClicked

    private void main_tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_main_tabbedPaneStateChanged
        switch (main_tabbedPane.getSelectedIndex()) {
            case 0:
                this.ok_btn.setEnabled(false);
                break;
            case 1:
                this.setDestinationsTable(String.valueOf(project_filter.getSelectedItem()));
                this.ok_btn.setEnabled(true);
                break;
        }

    }//GEN-LAST:event_main_tabbedPaneStateChanged

    private void deliveryDatePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deliveryDatePickerKeyPressed
        if (deliveryDatePicker.getDate() == null ) {
            main_tabbedPane.setEnabledAt(1, false);
        } else {
            main_tabbedPane.setEnabledAt(1, true);
        }
    }//GEN-LAST:event_deliveryDatePickerKeyPressed

    private void deliveryDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryDatePickerActionPerformed
        if (deliveryDatePicker.getDate() == null ) {
            main_tabbedPane.setEnabledAt(1, false);
        } else {
            main_tabbedPane.setEnabledAt(1, true);
        }
    }//GEN-LAST:event_deliveryDatePickerActionPerformed

    public void disableEditingTable() {
        for (int c = 1; c < destinations_table.getColumnCount(); c++) {
            Class<?> col_class = destinations_table.getColumnClass(c);
            if (col_class != Boolean.class) {
                destinations_table.setDefaultEditor(col_class, null);        // remove editor            
            }
        }
    }

    /**
     * Charge les destinations dans le jBox
     *
     * @param project
     */
    public void setDestinationsTable(String project) {
        Helper.startSession();
        Query query;
        if (project == "") {
            query = Helper.sess.createQuery(HQLHelper.GET_ALL_FINAL_DESTINATIONS);
        } else {
            query = Helper.sess.createQuery(HQLHelper.GET_LOAD_PLAN_DEST_PROJECT);
            query.setParameter("project", project);
        }
        Helper.sess.getTransaction().commit();
        List result = query.list();

        if (result.isEmpty()) {
            UILog.info(ErrorMsg.APP_ERR0025[0]);
            UILog.infoDialog(null, ErrorMsg.APP_ERR0025);

            this.dispose();
        } else {
            //Create the destinations table component
            Object[][] data = new Object[result.size()][2];
            for (int i = 0; i < result.size(); i++) {
                LoadPlanDestination dest = (LoadPlanDestination) result.get(i);
                data[i][0] = false;
                data[i][1] = dest.getDestination();
            }

            String[] cols = {"", "Destination finale"};
            DefaultTableModel model = new DefaultTableModel(data, cols) {
                @Override
                public Class<?> getColumnClass(int column) {
                    if (column == 1) {
                        return String.class;
                    } else {
                        return Boolean.class;
                    }
                }

            };
            destinations_table.setModel(model);

            //Set the Jtable column
            TableColumnModel columnModel = destinations_table.getColumnModel();
            columnModel.getColumn(0).setMaxWidth((int) (10 * 10000));
            columnModel.getColumn(1).setMaxWidth((int) (90 * 10000));

            destinations_table.setColumnModel(columnModel);

            this.setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_btn;
    private org.jdesktop.swingx.JXDatePicker deliveryDatePicker;
    private javax.swing.JTable destinations_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel login_lbl3;
    private javax.swing.JLabel login_lbl4;
    private javax.swing.JTabbedPane main_tabbedPane;
    private javax.swing.JButton ok_btn;
    private javax.swing.JComboBox project_filter;
    private javax.swing.JPanel tab1;
    private javax.swing.JScrollPane tab2_fdp;
    private javax.swing.JComboBox<String> transporter_filter;
    private javax.swing.JTextField truck_no_text;
    private javax.swing.JComboBox<String> warehouse_filter;
    // End of variables declaration//GEN-END:variables

}
