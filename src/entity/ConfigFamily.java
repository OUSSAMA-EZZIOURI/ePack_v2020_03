package entity;
// Generated 6 fï¿½vr. 2016 21:43:55 by Hibernate Tools 3.6.0

import helper.ComboItem;
import helper.Helper;
import java.util.List;
import org.hibernate.Query;
import helper.HQLHelper;
import hibernate.DAO;
import java.awt.Component;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.swing.JComboBox;
import org.hibernate.SQLQuery;
import org.hibernate.type.StandardBasicTypes;
import ui.UILog;
import ui.error.ErrorMsg;

/**
 * ConfigFamily generated by hbm2java
 */
@Entity
@Table(name = "config_family")
public class ConfigFamily extends DAO implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "config_family_id_seq")
    @SequenceGenerator(name = "config_family_id_seq", sequenceName = "config_family_id_seq", allocationSize = 1)
    private Integer id;

    @Column(name = "harness_type")
    private String harnessType;

    @Column(name = "project")
    private String project;

    /**
     * Which packaging mode to be selected in the packaging module 1, 2 or 3
     */
    @Column(name = "packaging_mode")
    private String packagingMode;

    public ConfigFamily() {
    }

    public ConfigFamily(String harnessType) {
        this.harnessType = harnessType;
    }

    public ConfigFamily(String harnessType, String project) {
        this.harnessType = harnessType;
        this.project = project;
    }
    
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFamily() {
        return harnessType;
    }

    public void setFamily(String harnessType) {
        this.harnessType = harnessType;
    }

    public void setProject(String project) {
        this.project = project;
    }

    public String getProject() {
        return this.project;
    }

    public String getPackagingMode() {
        return packagingMode;
    }

    public void setPackagingMode(String packagingMode) {
        this.packagingMode = packagingMode;
    }

    //######################################################################
    public List select() {
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_ALL_FAMILIES);
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public List<String[]> selectFamilyByProject(String project) {
        Helper.startSession();
        SQLQuery query = Helper.sess.createSQLQuery("SELECT DISTINCT harness_type FROM config_family WHERE project = '" + project + "'");
        query.addScalar("harness_type", StandardBasicTypes.STRING);
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public List<String[]> selectHarnessType() {
        Helper.startSession();
        SQLQuery query = Helper.sess.createSQLQuery("SELECT DISTINCT harness_type FROM config_family");
        query.addScalar("harness_type", StandardBasicTypes.STRING);
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    /**
     *
     * @return
     */
    public List getFamilies(String harnessType) {
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_ALL_FAMILIES);
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    /**
     * Get Product family by name
     *
     * @param family
     * @return
     */
    public ConfigFamily getFamilyByName(String family) {
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_FAMILY_BY_NAME);
        query.setParameter("harnessType", family);
        Helper.sess.getTransaction().commit();
        return (ConfigFamily) query.list().get(0);
    }

    public static JComboBox initFamilyByProject(Object parentUI, JComboBox box, String project) {
        List result;
        box.removeAllItems();

        if (project.isEmpty()) {
            //box.addItem(new ComboItem("ALL", "ALL"));
            box.addItem("ALL");
            result = new ConfigFamily().select();
            if (result.isEmpty()) {
                UILog.severeDialog((Component) parentUI, ErrorMsg.APP_ERR0044);
                UILog.severe(ErrorMsg.APP_ERR0044[1]);
            } else { //Map project data in the list
                for (Object o : result) {
                    ConfigFamily f = (ConfigFamily) o;
                    //box.addItem(new ComboItem(f.getFamily(), f.getFamily()));
                    box.addItem(f.getFamily());
                }
            }
        } else {
            result = new ConfigFamily().selectFamilyByProject(project);
            if (result.isEmpty()) {
                UILog.severeDialog((Component) parentUI, ErrorMsg.APP_ERR0047);
                UILog.severe(ErrorMsg.APP_ERR0047[1]);
            } else { //Map project data in the list
                for (Object o : result) {
                    //box.addItem(new ComboItem(o.toString(), o.toString()));
                    box.addItem(o.toString());
                }
            }
        }
        
        return box;

    }

}
