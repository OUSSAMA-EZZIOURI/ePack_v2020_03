package entity;

import __main__.GlobalVars;
import gui.packaging.PackagingVars;
import hibernate.DAO;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;

/**
 * ConfigUcs generated by hbm2java
 */
@Entity
@Table(name = "wire_stock_loc")
public class WireStockLoc extends DAO implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "wire_stock_loc_id_seq")
    @SequenceGenerator(name = "wire_stock_loc_id_seq", sequenceName = "wire_stock_loc_id_seq", allocationSize = 1)
    private Integer id;
    
    @Column(name = "project")
    private String project;

    @Column(name = "warehouse")
    private String warehouse;

    @Column(name = "location")
    private String location;

    @Column(name = "create_id")
    private Integer createId;

    @Column(name = "write_id")
    private Integer writeId;

    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "write_time")
    private Date writeTime;

    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "create_time")
    private Date createTime;

    @Column(name = "create_user")
    private String createUser;

    @Column(name = "write_user")
    private String writeUser;

    public WireStockLoc() {
    }

    public WireStockLoc(String project, String warehouse, String location) {
        this.project = project;
        this.warehouse = warehouse;
        this.location = location;
        this.createId = PackagingVars.context.getUser().getId();
        this.writeId = PackagingVars.context.getUser().getId();
        this.writeUser = this.createUser = PackagingVars.context.getUser().getFirstName() + " " + PackagingVars.context.getUser().getLastName();
        this.createTime = this.writeTime = new Date();
    }

    //######################################################################
    /**
     * public List select() { Helper.startSession(); Query query =
     * Helper.sess.createQuery(HQLHelper.); UILog.info(query.getQueryString());
     * Helper.sess.getTransaction().commit(); return query.list(); } *
     */
    //####################### Getters & Setters ############################
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }
    
    public String getProject() {
        return project;
    }

    public void setProject(String project) {
        this.project = project;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Integer getCreateId() {
        return createId;
    }

    public void setCreateId(Integer createId) {
        this.createId = createId;
    }

    public Integer getWriteId() {
        return writeId;
    }

    public void setWriteId(Integer writeId) {
        this.writeId = writeId;
    }

    public void setWriteTime(Date writeTime) {
        this.writeTime = writeTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }
    
    public String getWriteTime() {
        return new SimpleDateFormat("YYYY-MM-dd HH:mm:ss").format(writeTime);
    }
    
    public void setWriteTime(String writeTime) {
        try {
            this.writeTime = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss").parse(writeTime);
        } catch (ParseException ex) {

        }
    }

    public String getCreateTime() {
        return new SimpleDateFormat("YYYY-MM-dd HH:mm:ss").format(createTime);
    }
    
    public void setCreateTime(String createTime) {
        try {
            this.createTime = new SimpleDateFormat("YYYY-MM-DD HH:mm:ss").parse(createTime);
        } catch (ParseException ex) {
            Logger.getLogger(WireConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    public String getWriteUser() {
        return writeUser;
    }
    
    public String getWarehouse() {
        return warehouse;
    }

    public void setWarehouse(String warehouse) {
        this.warehouse = warehouse;
    }

    

    @Override
    public void update(Object obj) {
        WireStockLoc aux = (WireStockLoc) obj;
        aux.setWriteId(GlobalVars.CONNECTED_USER.getId());
        aux.setWriteTime(new Date());
        
        super.update(aux); 
    }

    @Override
    public int create(Object obj) {
        WireStockLoc aux = (WireStockLoc) obj;
        aux.writeId = aux.createId = GlobalVars.CONNECTED_USER.getId();
        aux.createTime = aux.writeTime = new Date();
        return super.create(aux);
    }

    @Override
    public String toString() {
        return "WireStockLoc{" + "id=" + id + "\n, project=" + project + "\n, warehouse=" + warehouse + "\n, location=" + location + "\n, createId=" + createId + "\n, writeId=" + writeId + "\n, writeTime=" + writeTime + "\n, createTime=" + createTime + "\n, createUser=" + createUser + "\n, writeUser=" + writeUser + '}';
    }
    
    
    
     

}
