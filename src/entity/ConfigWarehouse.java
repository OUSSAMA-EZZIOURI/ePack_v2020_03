package entity;

import __main__.GlobalVars;
import __main__.GlobalVars.WarehouseType;
import hibernate.DAO;
import java.io.Serializable;
import helper.HQLHelper;
import helper.Helper;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.swing.JComboBox;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import ui.UILog;
import ui.error.ErrorMsg;

/**
 * ConfigUcs generated by hbm2java
 */
@Entity
@Table(name = "config_warehouse")
public class ConfigWarehouse extends DAO implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "config_warehouse_id_seq")
    @SequenceGenerator(name = "config_warehouse_id_seq", sequenceName = "config_warehouse_id_seq", allocationSize = 1)
    private Integer id;

    @Column(name = "warehouse")
    private String warehouse;

    @Column(name = "description")
    private String description;

    @Column(name = "project")
    private String project;

    /**
     * PACKAGING FINISH_GOODS TRANSIT SCRAP BLOQUED';
     */
    @Column(name = "wh_type")
    private String whType;

    public ConfigWarehouse() {
    }

    public ConfigWarehouse(String warehouse, String description, String project, String type) {
        this.warehouse = warehouse;
        this.description = description;
        this.project = project;
        this.whType = type;
    }
    
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getWarehouse() {
        return warehouse;
    }

    public void setWarehouse(String warehouse) {
        this.warehouse = warehouse;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getProject() {
        return project;
    }

    public void setProject(String project) {
        this.project = project;
    }

    public String getWarehouseType() {
        return whType;
    }

    public void setWhType(String whType) {
        this.whType = whType;
    }
    
    public List<String[]> select() {
        Helper.startSession();

        SQLQuery query = Helper.sess.createSQLQuery(HQLHelper.GET_All_WAREHOUSES);

        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public List<String[]> selectWarehousesByType(String wh_type) {
        Helper.startSession();

        Query query = Helper.sess.createQuery(HQLHelper.GET_WAREHOUSE_BY_TYPE);

        query.setParameter("wh_type", wh_type);
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public static List selectWarehouse(String warehouse) {
        Helper.startSession();

        Query query = Helper.sess.createQuery(HQLHelper.GET_WAREHOUSE);
        query.setParameter("warehouse", warehouse);

        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public List selectByProject(String project) {
        Helper.startSession();

        Query query = Helper.sess.createQuery(HQLHelper.GET_WAREHOUSE_BY_PROJECT);
        query.setParameter("project", project);

        Helper.sess.getTransaction().commit();
        return query.list();
    }
    
    public static String getWarehouseType(int whType) {        
        List<String> types = new ArrayList<String>() {
            {
                add("FINISHED_GOODS"); //
                add("PACKAGING");
                add("INVENTORY");
                add("SCRAP");
                add("TRANSIT");
                add("WIRES");
                add("RAW_MATERIAL");
            }
        };

        return types.get(whType);
    }
    
    public List selectByProjectAndType(String project, String type) {
        Helper.startSession();

        Query query = Helper.sess.createQuery(HQLHelper.GET_WAREHOUSE_BY_PROJECT_AND_TYPE);
        query.setParameter("project", project);
        query.setParameter("wh_type", type);

        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public String getPackagingWh(String project) {
        ConfigWarehouse cw = new ConfigWarehouse();
        List result = cw.selectByProjectAndType(project, "PACKAGING");

        cw = (ConfigWarehouse) result.get(0);
        return (String) cw.getWarehouse();
    }
    
    /**
     *
     * @param parentUI
     * @param jbox
     * @param project
     * @param warehouse_type
     * @param default_val
     * @param displayAll : True display All string in the jbox, false otherwise.
     * @return
     */
    public static JComboBox initWarehouseJBox(Object parentUI, JComboBox jbox, 
            String project, String warehouse_type, String default_val, boolean displayAll) {
        List result;
        jbox.removeAllItems();
        if (displayAll) {
            jbox.addItem("ALL");
        }
        if (project != null && !project.isEmpty() && !"null".equals(project)) {

            result = new ConfigWarehouse().selectByProjectAndType(project, warehouse_type);
            if (result.isEmpty()) {
                UILog.severeDialog((Component) parentUI, ErrorMsg.APP_ERR0042);
                UILog.severe(ErrorMsg.APP_ERR0042[1]);
            } else { //Map project data in the list
                for (Object o : result) {
                    ConfigWarehouse cp = (ConfigWarehouse) o;
                    jbox.addItem(cp.getWarehouse());
                    
                    if(cp.getWarehouse().equals(default_val)){
                         jbox.setSelectedItem(cp.getWarehouse());
                    }
                }
            }
        } else {
            result = new ConfigWarehouse().selectWarehousesByType(project);
            if (result.isEmpty()) {
                UILog.severeDialog((Component) parentUI, ErrorMsg.APP_ERR0042);
                UILog.severe(ErrorMsg.APP_ERR0042[1]);
            } else { //Map project data in the list
                for (Object o : result) {
                    ConfigWarehouse p = (ConfigWarehouse) o;
                    jbox.addItem(p.getWarehouse());
                }
            }
        }
        return jbox;
    }
    
    
    
    
    public static JComboBox getWarehouseTypeCombobox(JComboBox j) {

        j.addItem(GlobalVars.WarehouseType.FINISHED_GOODS);
        j.addItem(GlobalVars.WarehouseType.PACKAGING);
        j.addItem(GlobalVars.WarehouseType.INVENTORY);
        j.addItem(GlobalVars.WarehouseType.SCRAP);
        j.addItem(GlobalVars.WarehouseType.TRANSIT);
        j.addItem(GlobalVars.WarehouseType.WIRES);
        j.addItem(GlobalVars.WarehouseType.RAW_MATERIAL);
        return j;
    }
    
}
